package buildinggowebapps

import (
	. "github.com/Alan-Daniels/web/internal"
	. "github.com/Alan-Daniels/web/internal/blog/data"
	"time"
)

var Post = BlogPost{
	//PublishTime: time.Date(2024, time.September, 02, 0, 0, 0, 0, TimeZoneSydney),
	PublishTime: time.Now(),
	SafeName:    "building-web-apps-with-go-and-tailwind",
	PostTitle:   "Building web apps with Go and Tailwind",
	PostHead:    head,
	PostBody:    body,
	HeroImage:   "/assets/2024-09-01_building-web-apps-with-go-and-tailwind.jpg",
	ReadTimeAvg: "99h",
}

templ head() {
	<p>As part of my journey to create an online presence, I've built this website using a combination of tools and technologies that I'm excited to share with you.</p>
	<p>This blog post is a behind-the-scenes look at how I put it all together, including the specific technologies I used, and what I learned along the way.</p>
}

templ body() {
	@SubSection("Note") {
		<p>Please keep in mind that this post is more of a showcase than a definitive guide.</p>
		<p>While I'll be sharing my experiences, it's not intended to cover a lot of the troubleshooting I've gone through to get to the result I have.</p>
	}
	@Section("Defining the success criteria") {
		<p>My goal is to build a go webapp with Tailwind that meets three key criteria.</p>
		<p>It needs to be simple enough to launch in a day. It should have room to grow beyond being just a static site. And, it must be secure enough to run with little supervision required.</p>
		<p></p>
	}
	@Section("Tooling & Libraries") {
		<p>If you'd like to follow along, I use the following tools:</p>
		<ul class="mb-2">
			@NamedLI("Go toolchain") {
				I prefer Go version 1.22 and above as it fixes loop weirdness present in previous versions.
				<br/>
				If you want to develop on earlier toolchains anyway, make sure you are aware of 
				@OutLink(templ.SafeURL("https://go.dev/blog/loopvar-preview")) {
					the way loop variables work
				}
				.
			}
			@NamedLI("Air") {
				@OutLink("https://github.com/air-verse/air") {
					Live reload for Go apps
				}
				.
			}
			@NamedLI("NodeJS") {
				Specifically, this is for `npx` to build tailwind css.
			}
			@NamedLI("Templ") {
				Templ is a code-generation tool that lets you write html fragments with your go code.
				<br/>
				I suggest you take a look 
				@OutLink(templ.SafeURL("https://templ.guide/")) {
					at their to-the-point docs
				}
				.
			}
		</ul>
		<p>Additionally, I'm using the <span class="font-semibold">Echo</span> http library for its lightweight feel and support for convienent middleware modules.</p>
		<p>
			@OutLink("https://echo.labstack.com/") {
				You can check out Echo here
			}
			.
		</p>
	}
	@Section("Setting up the dev environment") {
		<p>
			Some setup commands you might need to start a new repo.
		</p>
		@Code("shell") {
			{ setupGo }
		}
		@Code("shell") {
			{ setupNix }
		}
		<p>
			While 
			<span class="font-semibold">
				@OutLink(templ.SafeURL("https://nixos.org/")) {
					Nix
				}
			</span> isn't important for short-term, having nix handle the build of our application will make consistent deployment later an easier endeavour.
		</p>
		<p>The error is ok btw ;)</p>
		@Code("shell") {
			{ setupGit }
		}
		@Code("shell") {
			{ setupAir }
		}
	}
	@SubSection("Project Skeleton") {
		<p>We will be creating a number of these files in further sections.</p>
		@Code("shell") {
			{ tree }
		}
	}
	@Section("Working with Echo") {
		<p>
			Lets get started with our two libraries, Echo & Templ.
			<br/>
			Note: Go native libraries have been omitted.
		</p>
		@Code("main.go") {
			{ workingWithEchoImports }
		}
		<p class="pt-2">
			Echo makes it very easy to register routes.
			<br/>
			All you need is an endpoint and a function that takes echo.Context.
			We will cover one of these handlers, 
			@InlineCode() {
				ComponentHandler()
			}
			, further down.
		</p>
		@Code("main.go") {
			{ workingWithEchoMain }
		}
		<p>
			I've left out the middlewares here as they are better covered in 
			@OutLink(templ.SafeURL("https://echo.labstack.com/docs/category/middleware")) {
				Echo's documentation
			}
			. They cover a lot of useful features such as gzip, ratelimiting, etc.
		</p>
	}
	@SubSection("SSL Support") {
		<p>
			Using Go internal libraries we can ~auto-magically~ register ssl certificates with 
			@OutLink(templ.SafeURL("https://letsencrypt.org")) {
				letsencrypt.org
			}
			.
		</p>
		<p>
			Rather than using 
			@InlineCode() {
				app.StartAutoTLS()
			}
			, we are making our own so that we can run both http & https on non-privilaged ports.
			We will be port-forwarding in the deploy step.
		</p>
		<p>
			As an alternative, you could keep this server on http and use Nginx as a reverse to skip this step.
		</p>
		@Code("main.go") {
			{ sslSupport }
		}
	}
	@Section("Working with Templ") {
		<p>
			Within 
			@InlineCode() {
				.templ
			}
			&nbspfiles you can write 'templ' and 'css' functions with html and css fragments respectively.
			<br/>
			You can then call them as normal go functions both within templ files and in normal go files.
		</p>
		<p>
			You might have already seen in 
			@InlineCode() {
				main.go
			}
			&nbspwe reference 
			@InlineCode() {
				internal.Home()
			}
			&nbspwhich is defined here.
		</p>
		@Code("internal/home.templ") {
			{ workingWithTempl }
		}
		<p>
			Note: We are embedding 
			@InlineCode() {
				commit.txt
			}
			&nbspas a cache-busting mechanism.
			<br/>
			@InlineCode() {
				commit.txt
			}
			&nbspwill be written to during the Nix build process.
		</p>
	}
	@SubSection("Echo & Templ glue code") {
		<p>
			To have Echo & Templ work together we need a custom render function.
			<br>
			We also have a default handler for Templ components that require no arguments.
		</p>
		@Code("main.go") {
			{ templEchoGlue }
		}
	}
	@Section("Closing Out") {
		<p>
			Feel free to check out my repo 
			@OutLink(templ.SafeURL("https://github.com/Alan-Daniels/web")) {
				on github
			}
			.
			<br/>
			If you have any questions, or if you've spotted an error, please feel free to open an issue there.
			<br/>
			Thank you!
		</p>
		<p>
			In the next post 
			@Spoiler() {
				coming soon
			}
			, I will cover building the package with nix, and a short example of using it in a system flake.
		</p>
	}
	//@BlogNotDoneSection()
}
