package admin

import (
	"fmt"
	"github.com/Alan-Daniels/web/internal/blocks"
	"github.com/Alan-Daniels/web/internal/data"
	"github.com/surrealdb/surrealdb.go/pkg/models"
	"strings"
)

var Mauve = "#cba6f7"
var Text = "#cdd6f4"
var Base = "#1e1e2e"

var Surface0 = "#313244"
var Surface1 = "#45475a"
var Surface2 = "#585b70"

var Overlay0 = "#6c7086"
var Overlay1 = "#7f849c"
var Overlay2 = "#9399b2"

templ Page(extraButtons []templ.Component) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<title>Alan Daniels</title>
			<link rel="stylesheet" href={ "/assets/styles.css?ver=" + "indev" }/>
			<!-- <script src="https://unpkg.com/htmx.org@1.9.11"></script> -->
		</head>
		<body class="bg-zinc-800">
			<div class="p-4">
				@Head(extraButtons)
				{ children... }
			</div>
		</body>
	</html>
}

css headFlavour() {
	background: { templ.SafeCSSProperty("repeating-linear-gradient(95deg, "+Mauve+", "+Mauve+" 2px, transparent 0, transparent 9px)") };
}

templ Head(extraButtons []templ.Component) {
	<header class="pb-6 text-5xl md:text-3xl lg:text-white">
		<div class={ "flex rounded overflow-hidden", headFlavour() }>
			<a href="/admin" class={ "bg-purple-400 p-2 text-gray-800 hover:underline" }>Admin</a>
			<nav class="ml-auto mr-8 flex h-fit w-fit self-center text-white">
				// <a href="/about" class="bg-dark p-1 m-1 rounded hover:text-purple-400">About</a>
				// <a href="/blog" class="bg-dark p-1 m-1 rounded hover:text-purple-400">Blog</a>
				// <a href="/now" class="bg-dark p-1 m-1 rounded hover:text-purple-400">Now</a>
				for _,link := range extraButtons {
					@link
				}
			</nav>
		</div>
	</header>
}

templ Tooltip(toolText string) {
	<div class="group flex relative">
		<span class="group-hover:opacity-100 transition-opacity bg-surface-100 px-1 text-sm text-white rounded-md absolute left-1/2 -translate-x-1/2 translate-y-full opacity-0 m-4 mx-auto z-10">{ toolText }</span>
		{ children... }
	</div>
}

var ImgSizes = "md:max-w-[40rem] xl:max-w-[50rem] 2xl:max-w-[60rem]"

templ Img(src, alttext, class string) {
	@Tooltip(alttext) {
		<img src={ src } alt={ alttext } class={ ImgSizes, "rounded", class }/>
	}
}

templ Title(title string) {
	<h1 class="text-4xl pt-5 font-bold">{ title }</h1>
}

templ Section(title string) {
	<h2 class="text-2xl pt-5 font-bold" id={ strings.ToLower(strings.ReplaceAll(title, " ", "-")) }>{ title } <a class="text-purple-400 hover:underline" href={ templ.SafeURL("#" + strings.ToLower(strings.ReplaceAll(title, " ", "-"))) }>#</a></h2>
	{ children... }
}

templ SubSection(title string) {
	<h3 class="text-xl pt-5 font-semibold" id={ strings.ToLower(strings.ReplaceAll(title, " ", "-")) }>{ title } <a class="text-purple-400 hover:underline" href={ templ.SafeURL("#" + strings.ToLower(strings.ReplaceAll(title, " ", "-"))) }>#</a></h3>
	{ children... }
}

templ Spoiler() {
	<span class={ "text-transparent bg-surface-100 rounded" , "hover:text-text aria-selected:text-text" }>
		{ children... }
	</span>
}

templ Code(name string) {
	<div class="bg-surface-100 my-1 overflow-x-scroll">
		<h4 class="px-4 py-1 bg-surface-200 w-fit">{ name }</h4>
		<pre class="px-4 pb-4 pt-1">
			<code>
				{ children... }
			</code>
		</pre>
	</div>
}

templ InlineCode() {
	<span class="bg-surface-100 p-0.5 rounded">
		{ children... }
	</span>
}

templ Link(uri templ.SafeURL) {
	<a href={ uri } class="text-purple-400 hover:underline">
		{ children... }
	</a>
}

templ OutLink(uri templ.SafeURL) {
	<a href={ uri } class="text-purple-400 hover:underline" target="_blank">
		{ children... }
	</a>
}

templ NamedLI(name string) {
	<li class="ml-4 mb-2">
		<span class="font-semibold -ml-4">{ name }</span>
		<br/>
		{ children... }
	</li>
}

templ Playground(query string, result interface{}) {
	<iframe src="/admin" name="query_result" frameborder="0"></iframe>
	<code>{ fmt.Sprintf("%v", result) }</code>
	<form action="/admin/pl" method="post" target="query_result">
		<textarea name="query" id="query" cols="30" rows="10">{ query }</textarea>
		<input type="submit"/>
	</form>
}

css cssRoute() {
	background-color: #0095A511;
}

css cssPage() {
	background-color: #9500A511;
}

templ ShowPage(pg *data.Page) {
	<div class={ cssPage() }>
		<h4>
			id: { pg.GetIDString() }
			<span style="float: right;padding-right: 1em;">
				@Link(templ.SafeURL(fmt.Sprintf("%s?id=%s", routes["editor"].Path, pg.GetIDString()))) {
					edit 
				}
			</span>
		</h4>
		<p>route: { pg.Method } ".{ pg.Path }"</p>
		<p>name: { pg.Name }</p>
		<div>
			<p>content: </p>
			@ContentComponent(pg.Block)
		</div>
	</div>
}

templ EditorSaveBtn(id *models.RecordID) {
	<button id="editor~save" class="text-sm p-1 m-1 bg-zinc-800 text-purple-400 hover:text-purple-300 rounded" data-id={ id.String() }>Save</button>
}

templ PageEditor(content data.Block, id *models.RecordID) {
	{{ bct := NewBlockCounter(0) }}
	@Page([]templ.Component{EditorSaveBtn(id)}) {
		<div class="inline-flex w-[100%]">
			<div class="flex-grow">
				@EditBlock(content, bct)
			</div>
			<div class="bg-zinc-600 order-first">
				{{ ct := bct.Reset() }}
				<input type="hidden" name="block-count" id="block-count" value={ fmt.Sprint(ct) }/>
				@EditBlockForm(content, bct, 0)
			</div>
		</div>
	}
	<div style="display:none;" id="editor~urls" data-save={ routes["editor.save"].Path } data-block-update={ routes["editor.block.update"].Path } data-block-create={ routes["editor.block.create"].Path }></div>
	@blocks.NewBlockModal(bct.Next())
	@blocks.InlineJs()
}

templ TemplEditor(content data.Block, id, parent int) {
	<template>
		{{ bct := NewBlockCounter(id - 1) }}
		@EditBlock(content, bct)
		{{ bct = NewBlockCounter(id - 1) }}
		@EditBlockForm(content, bct, parent)
	</template>
}

templ EditBlockForm(b data.Block, bId *BlockCounter, parent int) {
	{{ id := bId.Next() }}
	{{ form, _ := b.Form(id, parent) }}
	@form {
		for _, child := range b.Children {
			@EditBlockForm(child, bId, id)
		}
	}
}

templ EditBlockChildren() {
	<div class="block~children">
		{ children... }
	</div>
}

templ EditBlock(b data.Block, bId *BlockCounter) {
	{{ id := bId.Next() }}
	<div id={ fmt.Sprintf("block~%d", id) } data-children-selector=".block\~children" data-id={ fmt.Sprint(id) }>
		@EditorComponent(b) {
			@EditBlockChildren() {
				for _, child := range b.Children {
					@EditBlock(child, bId)
				}
			}
		}
	</div>
}

templ PageRoutes(rt *RouteTree) {
	@Page([]templ.Component{}) {
		@ShowRoutes(rt)
	}
}

templ ShowRoutes(rt *RouteTree) {
	<div class={ cssRoute() }>
		<h3>id: { rt.GetIDString() }</h3>
		<p>prefix: ".{ rt.Prefix }"</p>
		<div>
			<p>pages: </p>
			for _,item := range rt.PageChildren {
				@ShowPage(&item)
			}
		</div>
		<div>
			<p>groups: </p>
			for _,item := range rt.GroupChildren {
				@ShowRoutes(&item)
			}
		</div>
	</div>
}
